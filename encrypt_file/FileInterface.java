import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;

/** FileInterface class
 * proides UI to encrypted file
 * NetBeans helped generate part of this class
 * @author Derek Zhang
 */
public class FileInterface extends javax.swing.JFrame {

    private static final String FILE_PATH = "file.txt";
    private static final int IV_BYTE_SIZE = 16;

    private final Cryptography crypto;

    /**
     * Creates new form FileInterface
     *
     * @param fileKey
     * @throws java.lang.Exception if file read or decryption errors
     */
    public FileInterface(byte[] fileKey) throws Exception {
        initComponents();

        crypto = new Cryptography(fileKey);
        textArea.setText(readFile());
        progressBar.setValue(progressBar.getMaximum());

        addMenuItems();
    }

    private void addMenuItems() {

        JMenuItem menuItem;

        menuItem = new JMenuItem(new DefaultEditorKit.CopyAction());
        menuItem.setText("Copy");
        menuItem.setMnemonic(KeyEvent.VK_C);
        editMenu.add(menuItem);

        menuItem = new JMenuItem(new DefaultEditorKit.PasteAction());
        menuItem.setText("Paste");
        menuItem.setMnemonic(KeyEvent.VK_P);
        editMenu.add(menuItem);
    }
    
    private String readFile() throws IOException, GeneralSecurityException {

        File file = new File(FILE_PATH);

        if (!file.exists()) {

            file.createNewFile();
            return "";
        }

        byte[] fileBytes = Files.readAllBytes(file.toPath());

        byte[] bArray = crypto.decrypt(Arrays.copyOfRange(fileBytes, 0, IV_BYTE_SIZE),
            Arrays.copyOfRange(fileBytes, IV_BYTE_SIZE, fileBytes.length));
        return new String(bArray, StandardCharsets.UTF_8);
    }

    private void writeFile() throws Exception {

        File file = new File(FILE_PATH);

        byte[] plainBytes = textArea.getText().getBytes(StandardCharsets.UTF_8);

        Cryptography.Output out = crypto.encrypt(plainBytes);
        int ivLen = out.iv.length;
        int ciLen = out.ciphertext.length;
        // create array big enough to combine iv and ciphertext
        byte[] encrypted = new byte[ivLen + ciLen];

        System.arraycopy(out.iv, 0, encrypted, 0, ivLen);
        System.arraycopy(out.ciphertext, 0, encrypted, ivLen, ciLen);

        Files.write(file.toPath(), encrypted);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FileSafe-Editor");

        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveClicked(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        editMenu.setMnemonic(KeyEvent.VK_E);
        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveClicked

        try {

            progressBar.setIndeterminate(true);
            textArea.setEnabled(false);
            writeFile();
            textArea.setEnabled(true);
            progressBar.setIndeterminate(false);
            progressBar.setValue(progressBar.getMaximum());
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error (FileInterface)!\n" + e.getMessage());
        }
    }//GEN-LAST:event_saveClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
